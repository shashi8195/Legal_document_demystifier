import React, { useState } from 'react';
import { AlertTriangle, CheckCircle, Info, Star, Download, Volume2, VolumeX, Scale, Shield } from 'lucide-react';
import { getRiskColor } from '../utils/riskUtils';
import { getRelevantIPCSections } from '../utils/ipcSections';
import { getLocalizedText } from '../utils/translations';

interface DocumentAnalysisProps {
  document: any;
  language: string;
}

export const DocumentAnalysis: React.FC<DocumentAnalysisProps> = ({ document, language }) => {
  const [isSimpleMode, setIsSimpleMode] = useState(false);
  const [isNarrating, setIsNarrating] = useState(false);
  const { analysis } = document;
  
  // Get relevant IPC sections based on document type and risk level
  const relevantIPCSections = getRelevantIPCSections(document.type, analysis.riskLevel);

  const handleNarration = () => {
    if (isNarrating) {
      speechSynthesis.cancel();
      setIsNarrating(false);
    } else {
      const text = isSimpleMode ? analysis.simpleSummary : analysis.summary;
      const utterance = new SpeechSynthesisUtterance(text);
      
      // Set language-specific voice
      const voices = speechSynthesis.getVoices();
      const langVoice = voices.find(voice => 
        voice.lang.startsWith(language === 'hi' ? 'hi' : 
                              language === 'ta' ? 'ta' : 
                              language === 'te' ? 'te' : 'en')
      );
      
      if (langVoice) utterance.voice = langVoice;
      utterance.rate = 0.8;
      utterance.onend = () => setIsNarrating(false);
      speechSynthesis.speak(utterance);
      setIsNarrating(true);
    }
  };

  const handleDownloadReport = () => {
    const reportContent = `
LEGAL DOCUMENT ANALYSIS REPORT
==============================

Document: ${document.name}
Analysis Date: ${new Date().toLocaleDateString()}
Risk Level: ${analysis.riskLevel.toUpperCase()}
Reading Mode: ${isSimpleMode ? 'Simple (Age 15)' : 'Professional'}

EXECUTIVE SUMMARY:
${isSimpleMode ? analysis.simpleSummary : analysis.summary}

DETAILED CLAUSE ANALYSIS:
${analysis.detailedClauses.map((clause: any, index: number) => `
${index + 1}. ${isSimpleMode ? clause.simpleTitle : clause.title}
   Original Text: ${clause.originalText}
   Explanation: ${isSimpleMode ? clause.simpleExplanation : clause.explanation}
   ${clause.risk ? `Risk: ${clause.risk}` : ''}
   ${clause.suggestion ? `Suggestion: ${clause.suggestion}` : ''}
   Importance: ${clause.importance.toUpperCase()}
`).join('\n')}

LEGAL TERMS DICTIONARY:
${analysis.legalTerms.map((term: any, index: number) => `
${index + 1}. ${term.term}
   Definition: ${isSimpleMode ? term.simpleDefinition : term.definition}
   ${term.example ? `Example: ${term.example}` : ''}
`).join('\n')}

YOUR RIGHTS & PROTECTIONS:
${analysis.rights.map((right: any, index: number) => `
${index + 1}. ${right.title}
   Explanation: ${isSimpleMode ? right.simpleExplanation : right.explanation}
   Legal Basis: ${right.legalBasis}
`).join('\n')}

${relevantIPCSections.length > 0 ? `
RELEVANT IPC SECTIONS:
${relevantIPCSections.map((section, index) => `
${index + 1}. IPC Section ${section.section}: ${section.title}
   Description: ${section.description}
   Punishment: ${section.punishment}
   Applicable Scenarios: ${section.applicableScenarios.join(', ')}
`).join('\n')}
` : ''}

Generated by LegalClarify - AI-Powered Legal Document Analysis
Report generated in ${isSimpleMode ? 'Simple' : 'Professional'} mode
    `;

    const element = document.createElement('a');
    const file = new Blob([reportContent], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${document.name}_full_analysis_report.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const handleShareWithLegal = () => {
    const shareContent = `
LEGAL DOCUMENT REVIEW REQUEST
============================

Document: ${document.name}
Analysis Date: ${new Date().toLocaleDateString()}
Risk Level: ${analysis.riskLevel.toUpperCase()}

SUMMARY:
${analysis.summary}

KEY CONCERNS:
${analysis.detailedClauses
  .filter((clause: any) => clause.importance === 'critical' || clause.risk)
  .map((clause: any, index: number) => `
${index + 1}. ${clause.title}
   Original Text: "${clause.originalText}"
   Concern: ${clause.risk || 'Critical importance'}
   ${clause.suggestion ? `Suggested Action: ${clause.suggestion}` : ''}
`).join('\n')}

QUESTIONS FOR LEGAL REVIEW:
1. Are the terms in this document legally enforceable?
2. What are the potential legal risks if I sign this document?
3. Are there any clauses that could be negotiated or modified?
4. What are my rights and protections under current law?
5. Are there any red flags I should be aware of?

Please review this document and provide professional legal advice.

Generated by LegalClarify - AI-Powered Legal Document Analysis
    `;

    // Create email link
    const subject = encodeURIComponent(`Legal Review Request: ${document.name}`);
    const body = encodeURIComponent(shareContent);
    const emailLink = `mailto:?subject=${subject}&body=${body}`;
    
    // Try to open email client
    window.open(emailLink);
    
    // Also provide download option
    const element = document.createElement('a');
    const file = new Blob([shareContent], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${document.name}_legal_review_request.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const handleGenerateChecklist = () => {
    const checklistContent = `
LEGAL DOCUMENT ACTION CHECKLIST
===============================

Document: ${document.name}
Generated: ${new Date().toLocaleDateString()}
Risk Level: ${analysis.riskLevel.toUpperCase()}

IMMEDIATE ACTIONS (Do These First):
${analysis.detailedClauses
  .filter((clause: any) => clause.importance === 'critical')
  .map((clause: any, index: number) => `
‚òê ${index + 1}. Review: ${clause.title}
   What to check: ${clause.explanation}
   ${clause.suggestion ? `Action: ${clause.suggestion}` : ''}
   Priority: CRITICAL
`).join('\n')}

IMPORTANT ACTIONS (Do Before Signing):
${analysis.detailedClauses
  .filter((clause: any) => clause.importance === 'important')
  .map((clause: any, index: number) => `
‚òê ${index + 1}. Verify: ${clause.title}
   What to check: ${clause.explanation}
   ${clause.suggestion ? `Action: ${clause.suggestion}` : ''}
   Priority: IMPORTANT
`).join('\n')}

GENERAL CHECKLIST:
‚òê Read the entire document carefully
‚òê Understand all terms and conditions
‚òê Verify all personal information is correct
‚òê Check dates, amounts, and deadlines
‚òê Understand your rights and obligations
‚òê Know the consequences of breaking the agreement
‚òê Keep copies of all signed documents
‚òê Ask questions about anything unclear

LEGAL RIGHTS TO REMEMBER:
${analysis.rights.map((right: any, index: number) => `
‚òê ${index + 1}. ${right.title}
   Know that: ${right.explanation}
   Legal basis: ${right.legalBasis}
`).join('\n')}

RED FLAGS TO WATCH FOR:
${analysis.detailedClauses
  .filter((clause: any) => clause.risk)
  .map((clause: any, index: number) => `
‚ö†Ô∏è  ${index + 1}. ${clause.title}
   Warning: ${clause.risk}
   ${clause.suggestion ? `What to do: ${clause.suggestion}` : ''}
`).join('\n')}

NEXT STEPS:
‚òê Complete all items on this checklist
‚òê Consult with a lawyer if you have concerns
‚òê Negotiate terms if possible
‚òê Only sign when you're completely comfortable
‚òê Keep this checklist for your records

Generated by LegalClarify - Your Legal Document Assistant
    `;

    const element = document.createElement('a');
    const file = new Blob([checklistContent], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${document.name}_action_checklist.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  return (
    <div className="space-y-8">
      {/* Controls */}
      <div className="bg-white rounded-lg p-4 border border-gray-200 shadow-sm">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <span className="text-sm font-medium text-gray-700">Reading Level:</span>
              <button
                onClick={() => setIsSimpleMode(!isSimpleMode)}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 ${
                  isSimpleMode 
                    ? 'bg-green-100 text-green-700 border border-green-300' 
                    : 'bg-blue-100 text-blue-700 border border-blue-300'
                }`}
              >
                {isSimpleMode ? 'üéì Simple (Age 15)' : 'üëî Professional'}
              </button>
            </div>
            
            <button
              onClick={handleNarration}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors duration-200 ${
                isNarrating 
                  ? 'bg-red-100 text-red-600 hover:bg-red-200' 
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
              }`}
            >
              {isNarrating ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
              <span className="text-sm">{isNarrating ? 'Stop' : 'Listen'}</span>
            </button>
          </div>
        </div>
      </div>

      {/* Executive Summary */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
        <div className="flex items-start space-x-4">
          <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
            <Info className="w-6 h-6 text-blue-600" />
          </div>
          <div className="flex-1">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              {isSimpleMode ? 'What This Document Means' : 'Executive Summary'}
            </h2>
            <p className="text-lg text-gray-700 leading-relaxed mb-6">
              {isSimpleMode ? analysis.simpleSummary : analysis.summary}
            </p>
            
            {/* Risk Level */}
            <div className={`inline-flex items-center px-4 py-2 rounded-lg border-2 ${getRiskColor(analysis.riskLevel)}`}>
              <AlertTriangle className="w-5 h-5 mr-2" />
              <span className="font-semibold capitalize">
                {analysis.riskLevel} Risk Level
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Detailed Clause Analysis */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
          <Scale className="w-6 h-6 text-purple-600 mr-3" />
          {isSimpleMode ? 'Important Parts Explained' : 'Detailed Clause Analysis'}
        </h2>
        
        <div className="space-y-6">
          {analysis.detailedClauses.map((clause: any, index: number) => (
            <div key={index} className="border border-gray-200 rounded-lg p-6">
              <div className="flex items-start justify-between mb-4">
                <h3 className="font-semibold text-gray-900 text-lg">
                  {isSimpleMode ? `Part ${index + 1}: ${clause.simpleTitle}` : clause.title}
                </h3>
                <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                  clause.importance === 'critical' ? 'bg-red-100 text-red-700' :
                  clause.importance === 'important' ? 'bg-yellow-100 text-yellow-700' :
                  'bg-blue-100 text-blue-700'
                }`}>
                  {clause.importance.toUpperCase()}
                </span>
              </div>
              
              <div className="space-y-4">
                <div className="bg-gray-50 p-4 rounded border-l-4 border-gray-400">
                  <p className="text-sm font-medium text-gray-700 mb-2">
                    {isSimpleMode ? 'What the document says:' : 'Original Text:'}
                  </p>
                  <p className="text-gray-600 italic">{clause.originalText}</p>
                </div>
                
                <div className="bg-blue-50 p-4 rounded border-l-4 border-blue-400">
                  <p className="text-sm font-medium text-blue-700 mb-2">
                    {isSimpleMode ? 'What this actually means:' : 'Plain English Translation:'}
                  </p>
                  <p className="text-blue-800">
                    {isSimpleMode ? clause.simpleExplanation : clause.explanation}
                  </p>
                </div>
                
                {clause.risk && (
                  <div className="bg-red-50 p-4 rounded border-l-4 border-red-400">
                    <p className="text-sm font-medium text-red-700 mb-2">
                      {isSimpleMode ? 'Why you should be careful:' : 'Potential Risk:'}
                    </p>
                    <p className="text-red-800">{clause.risk}</p>
                  </div>
                )}
                
                {clause.suggestion && (
                  <div className="bg-green-50 p-4 rounded border-l-4 border-green-400">
                    <p className="text-sm font-medium text-green-700 mb-2">
                      {isSimpleMode ? 'What you can do:' : 'Suggested Action:'}
                    </p>
                    <p className="text-green-800">{clause.suggestion}</p>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Legal Terms Dictionary */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-6">
          {isSimpleMode ? 'Confusing Words Explained' : 'Legal Terms Dictionary'}
        </h2>
        <div className="grid md:grid-cols-2 gap-6">
          {analysis.legalTerms.map((term: any, index: number) => (
            <div key={index} className="p-4 bg-blue-50 rounded-lg border border-blue-200">
              <h4 className="font-semibold text-blue-900 mb-2">{term.term}</h4>
              <p className="text-blue-800 text-sm leading-relaxed">
                {isSimpleMode ? term.simpleDefinition : term.definition}
              </p>
              {term.example && (
                <p className="text-blue-700 text-xs mt-2 italic">
                  Example: {term.example}
                </p>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Know Your Rights Section */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
          <CheckCircle className="w-6 h-6 text-green-600 mr-3" />
          {isSimpleMode ? 'Your Rights & Protections' : 'Legal Rights Analysis'}
        </h2>
        
        <div className="grid md:grid-cols-2 gap-6">
          {analysis.rights.map((right: any, index: number) => (
            <div key={index} className="p-4 bg-green-50 rounded-lg border border-green-200">
              <h4 className="font-semibold text-green-900 mb-2 flex items-center">
                <Shield className="w-4 h-4 mr-2" />
                {right.title}
              </h4>
              <p className="text-green-800 text-sm leading-relaxed mb-2">
                {isSimpleMode ? right.simpleExplanation : right.explanation}
              </p>
              <p className="text-green-700 text-xs">
                <strong>Legal Basis:</strong> {right.legalBasis}
              </p>
            </div>
          ))}
        </div>
      </div>

      {/* IPC Sections */}
      {relevantIPCSections.length > 0 && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
            <Scale className="w-6 h-6 text-red-600 mr-3" />
            {getLocalizedText('ipc_sections', language)}
          </h2>
          
          <div className="space-y-6">
            {relevantIPCSections.map((section, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-6">
                <div className="flex items-start justify-between mb-4">
                  <h3 className="font-semibold text-gray-900 text-lg">
                    {getLocalizedText('ipc_section', language)} {section.section}: {section.title}
                  </h3>
                  <span className="px-3 py-1 bg-red-100 text-red-700 rounded-full text-xs font-medium">
                    {getLocalizedText('punishment', language)}
                  </span>
                </div>
                
                <div className="space-y-4">
                  <div className="bg-gray-50 p-4 rounded border-l-4 border-gray-400">
                    <p className="text-sm font-medium text-gray-700 mb-2">
                      {getLocalizedText('description', language)}:
                    </p>
                    <p className="text-gray-600">{section.description}</p>
                  </div>
                  
                  <div className="bg-red-50 p-4 rounded border-l-4 border-red-400">
                    <p className="text-sm font-medium text-red-700 mb-2">
                      {getLocalizedText('punishment', language)}:
                    </p>
                    <p className="text-red-800 font-medium">{section.punishment}</p>
                  </div>
                  
                  <div className="bg-blue-50 p-4 rounded border-l-4 border-blue-400">
                    <p className="text-sm font-medium text-blue-700 mb-2">
                      {getLocalizedText('applies_to_document', language)}:
                    </p>
                    <ul className="text-blue-800 space-y-1">
                      {section.applicableScenarios.slice(0, 3).map((scenario, idx) => (
                        <li key={idx} className="flex items-start">
                          <span className="text-blue-600 mr-2">‚Ä¢</span>
                          {scenario}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        <button 
          onClick={handleDownloadReport}
          className="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors duration-200 flex items-center justify-center"
        >
          <Download className="w-5 h-5 mr-2" />
          {isSimpleMode ? 'Save This Analysis' : 'Download Full Analysis Report'}
        </button>
        <button 
          onClick={handleShareWithLegal}
          className="px-6 py-3 bg-white text-gray-700 font-medium rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors duration-200"
        >
          {isSimpleMode ? 'Send to a Lawyer' : 'Share with Legal Professional'}
        </button>
        <button 
          onClick={handleGenerateChecklist}
          className="px-6 py-3 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 transition-colors duration-200"
        >
          {isSimpleMode ? 'What Should I Do Next?' : 'Generate Action Checklist'}
        </button>
      </div>
    </div>
  );
};