import React, { useState } from 'react';
import { FileText, AlertTriangle, CheckCircle, Clock, Download, Eye, X } from 'lucide-react';
import { getRiskColor } from '../utils/riskUtils';
import { getLocalizedText } from './LanguageSelector';

interface DashboardProps {
  docData: any;
  onViewDocument: () => void;
  language: string;
}

export const Dashboard: React.FC<DashboardProps> = ({ docData, onViewDocument, language }) => {
  const [showChecklist, setShowChecklist] = useState(false);

  const getRiskIcon = (level: string) => {
    switch (level) {
      case 'high': return <AlertTriangle className="w-5 h-5" />;
      case 'medium': return <Clock className="w-5 h-5" />;
      case 'low': return <CheckCircle className="w-5 h-5" />;
      default: return <FileText className="w-5 h-5" />;
    }
  };

  const handleDownloadSummary = () => {
    const summaryContent = `
LEGAL DOCUMENT ANALYSIS SUMMARY
===============================

Document: ${docData.name}
Analysis Date: ${new Date().toLocaleDateString()}
Risk Level: ${docData.analysis.riskLevel.toUpperCase()}

EXECUTIVE SUMMARY:
${docData.analysis.summary}

KEY POINTS:
${docData.analysis.keyPoints.map((point: string, index: number) => `${index + 1}. ${point}`).join('\n')}

RISKY CLAUSES:
${docData.analysis.riskyClausesDetailed.map((clause: any, index: number) => `
${index + 1}. ${clause.title}
   Risk: ${clause.risk}
   Explanation: ${clause.explanation}
`).join('\n')}

YOUR RIGHTS:
${docData.analysis.rights.map((right: any, index: number) => `
${index + 1}. ${right.title}
   Explanation: ${right.explanation}
   Legal Basis: ${right.legalBasis}
`).join('\n')}

Generated by LegalClarify - AI-Powered Legal Document Analysis
    `;

    const element = document.createElement('a');
    const file = new Blob([summaryContent], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${docData.name}_analysis_summary.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const handleGenerateChecklist = () => {
    setShowChecklist(true);
  };

  const handleDownloadChecklist = () => {
    const checklistContent = `
LEGAL DOCUMENT CHECKLIST
========================

Document: ${docData.name}
Generated: ${new Date().toLocaleDateString()}

BEFORE SIGNING - VERIFY THESE ITEMS:
${docData.analysis.checklist.map((item: any, index: number) => `
‚òê ${item.title}
   What to check: ${item.simpleDescription}
   Priority: ${item.urgency.toUpperCase()}
`).join('\n')}

IMPORTANT REMINDERS:
- Take photos of the property condition before moving in
- Keep copies of all signed documents
- Read everything carefully before signing
- Ask questions if anything is unclear
- Consider getting legal advice for high-risk items

Generated by LegalClarify - Your Legal Document Assistant
    `;

    const element = document.createElement('a');
    const file = new Blob([checklistContent], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${docData.name}_checklist.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Document Header */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="flex items-start justify-between">
          <div className="flex items-start space-x-4">
            <div className="p-3 bg-blue-50 rounded-lg">
              <FileText className="w-6 h-6 text-blue-600" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">{docData.name}</h1>
              <p className="text-gray-600 mt-1">
                {getLocalizedText('uploaded_on', language)} {new Date(docData.uploadDate).toLocaleDateString()}
              </p>
              <div className="flex items-center mt-2 space-x-4">
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getRiskColor(docData.analysis?.riskLevel || 'low')}`}>
                  {getRiskIcon(docData.analysis?.riskLevel || 'low')}
                  <span className="ml-2 capitalize">
                    {getLocalizedText('risk_level', language)}: {docData.analysis?.riskLevel || 'Low'}
                  </span>
                </span>
                <span className="text-sm text-gray-500">{docData.type}</span>
              </div>
            </div>
          </div>
          <div className="flex space-x-3">
            <button
              onClick={onViewDocument}
              className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
            >
              <Eye className="w-4 h-4 mr-2" />
              {getLocalizedText('view_document', language)}
            </button>
            <button 
              onClick={handleDownloadSummary}
              className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
            >
              <Download className="w-4 h-4 mr-2" />
              {getLocalizedText('download_summary', language)}
            </button>
          </div>
        </div>
      </div>

      {/* Quick Summary */}
      {docData.analysis?.summary && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            {getLocalizedText('quick_summary', language)}
          </h2>
          <p className="text-gray-700 leading-relaxed">{docData.analysis.summary}</p>
        </div>
      )}

      {/* Risk Analysis */}
      {docData.analysis?.riskyClausesDetailed && docData.analysis.riskyClausesDetailed.length > 0 && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            {getLocalizedText('risk_analysis', language)}
          </h2>
          <div className="space-y-4">
            {docData.analysis.riskyClausesDetailed.slice(0, 3).map((clause: any, index: number) => (
              <div key={index} className={`p-4 rounded-lg border-l-4 ${
                clause.severity === 'high' ? 'border-red-500 bg-red-50' :
                clause.severity === 'medium' ? 'border-orange-500 bg-orange-50' :
                'border-green-500 bg-green-50'
              }`}>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h3 className="font-medium text-gray-900">{clause.simpleTitle}</h3>
                    <p className="text-gray-700 mt-1">{clause.simpleExplanation}</p>
                  </div>
                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getRiskColor(clause.severity)}`}>
                    {getRiskIcon(clause.severity)}
                    <span className="ml-1 capitalize">{clause.severity}</span>
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Key Points */}
      {docData.analysis?.keyPoints && docData.analysis.keyPoints.length > 0 && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            {getLocalizedText('key_points_remember', language)}
          </h2>
          <ul className="space-y-3">
            {docData.analysis.keyPoints.map((point: string, index: number) => (
              <li key={index} className="flex items-start space-x-3">
                <CheckCircle className="w-5 h-5 text-green-600 mt-0.5 flex-shrink-0" />
                <span className="text-gray-700">{point}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Action Buttons */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">
          {getLocalizedText('what_next', language)}
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <button
            className="flex items-center justify-center px-6 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <span className="text-lg">üí¨</span>
            <span className="ml-3 font-medium">
              {getLocalizedText('ask_questions', language)}
            </span>
          </button>
          <button 
            onClick={handleGenerateChecklist}
            className="flex items-center justify-center px-6 py-4 border-2 border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition-colors"
          >
            <span className="text-lg">üìã</span>
            <span className="ml-3 font-medium">
              {getLocalizedText('generate_checklist', language)}
            </span>
          </button>
        </div>
      </div>

      {/* Legal Checklist Modal */}
      {showChecklist && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[80vh] overflow-auto">
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-bold text-gray-900">
                  {getLocalizedText('legal_checklist', language)}
                </h2>
                <button
                  onClick={() => setShowChecklist(false)}
                  className="p-2 hover:bg-gray-100 rounded-lg"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            </div>
            
            <div className="p-6 space-y-4">
              {docData.analysis?.checklist?.map((item: any, index: number) => (
                <div key={index} className="flex items-start space-x-3 p-4 bg-gray-50 rounded-lg">
                  <div className={`w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 ${
                    item.urgency === 'high' ? 'bg-red-100 text-red-600' :
                    item.urgency === 'medium' ? 'bg-yellow-100 text-yellow-600' :
                    'bg-green-100 text-green-600'
                  }`}>
                    {index + 1}
                  </div>
                  <div className="flex-1">
                    <h3 className="font-medium text-gray-900 mb-1">{item.title}</h3>
                    <p className="text-sm text-gray-600">{item.simpleDescription}</p>
                  </div>
                </div>
              ))}
              
              <button
                onClick={handleDownloadChecklist}
                className="w-full mt-6 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center"
              >
                <Download className="w-4 h-4 mr-2" />
                {getLocalizedText('download_checklist', language)}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};